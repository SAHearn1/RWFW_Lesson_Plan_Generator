// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // If using Accelerate for queries:
  // directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  lessonPlans   LessonPlan[]
  subscription  Subscription?
  profile       TeacherProfile?
}

model TeacherProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  schoolName  String?
  gradeLevel  String?
  subjectArea String?
  state       String?
  district    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LessonPlan {
  id              String    @id @default(cuid())
  title           String
  gradeLevel      String
  subjects        String[]
  createdAt       DateTime  @default(now())
  content         String    @db.Text
  frameworkTags   String[]
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  downloadedAt    DateTime?
  downloadCount   Int       @default(0)
  
  @@index([userId])
  @@index([createdAt])
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId     String   @unique
  stripeSubscriptionId String   @unique
  status               String
  currentPeriodEnd     DateTime
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  USER
  PREMIUM_USER
  ADMIN
}
